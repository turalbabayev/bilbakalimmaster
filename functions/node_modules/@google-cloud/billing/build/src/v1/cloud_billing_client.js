"use strict";
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudBillingClient = void 0;
const jsonProtos = require("../../protos/protos.json");
const google_gax_1 = require("google-gax");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cloud_billing_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./cloud_billing_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Retrieves the Google Cloud Console billing accounts and associates them with
 *  projects.
 * @class
 * @memberof v1
 */
class CloudBillingClient {
    _terminated = false;
    _opts;
    _providedCustomServicePath;
    _gaxModule;
    _gaxGrpc;
    _protos;
    _defaults;
    _universeDomain;
    _servicePath;
    _log = google_gax_1.loggingUtils.log('billing');
    auth;
    descriptors = {
        page: {},
        stream: {},
        longrunning: {},
        batching: {},
    };
    warn;
    innerApiCalls;
    pathTemplates;
    cloudBillingStub;
    /**
     * Construct an instance of CloudBillingClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CloudBillingClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if (opts?.universe_domain &&
            opts?.universeDomain &&
            opts?.universe_domain !== opts?.universeDomain) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'
            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
            : undefined;
        this._universeDomain =
            opts?.universeDomain ??
                opts?.universe_domain ??
                universeDomainEnvVar ??
                'googleapis.com';
        this._servicePath = 'cloudbilling.' + this._universeDomain;
        const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
        this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
        const port = opts?.port || staticMembers.port;
        const clientConfig = opts?.clientConfig ?? {};
        const fallback = opts?.fallback ??
            (typeof window !== 'undefined' && typeof window?.fetch === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            billingAccountPathTemplate: new this._gaxModule.PathTemplate('billingAccounts/{billing_account}'),
            organizationPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}'),
            organizationBillingAccountPathTemplate: new this._gaxModule.PathTemplate('organizations/{organization}/billingAccounts/{billing_account}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            projectBillingInfoPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/billingInfo'),
            servicePathTemplate: new this._gaxModule.PathTemplate('services/{service}'),
            skuPathTemplate: new this._gaxModule.PathTemplate('services/{service}/skus/{sku}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listBillingAccounts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'billingAccounts'),
            listProjectBillingInfo: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'projectBillingInfo'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.billing.v1.CloudBilling', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.cloudBillingStub) {
            return this.cloudBillingStub;
        }
        // Put together the "service stub" for
        // google.cloud.billing.v1.CloudBilling.
        this.cloudBillingStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.billing.v1.CloudBilling')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.billing.v1.CloudBilling, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const cloudBillingStubMethods = [
            'getBillingAccount',
            'listBillingAccounts',
            'updateBillingAccount',
            'createBillingAccount',
            'listProjectBillingInfo',
            'getProjectBillingInfo',
            'updateProjectBillingInfo',
            'getIamPolicy',
            'setIamPolicy',
            'testIamPermissions',
            'moveBillingAccount',
        ];
        for (const methodName of cloudBillingStubMethods) {
            const callPromise = this.cloudBillingStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.cloudBillingStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'cloudbilling.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'cloudbilling.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-billing',
            'https://www.googleapis.com/auth/cloud-billing.readonly',
            'https://www.googleapis.com/auth/cloud-platform',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getBillingAccount(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getBillingAccount request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getBillingAccount response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getBillingAccount(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getBillingAccount response %j', response);
            return [response, options, rawResponse];
        });
    }
    updateBillingAccount(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('updateBillingAccount request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('updateBillingAccount response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .updateBillingAccount(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('updateBillingAccount response %j', response);
            return [response, options, rawResponse];
        });
    }
    createBillingAccount(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: request.parent ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('createBillingAccount request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('createBillingAccount response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .createBillingAccount(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('createBillingAccount response %j', response);
            return [response, options, rawResponse];
        });
    }
    getProjectBillingInfo(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getProjectBillingInfo request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getProjectBillingInfo response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getProjectBillingInfo(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getProjectBillingInfo response %j', response);
            return [response, options, rawResponse];
        });
    }
    updateProjectBillingInfo(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('updateProjectBillingInfo request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('updateProjectBillingInfo response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .updateProjectBillingInfo(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('updateProjectBillingInfo response %j', response);
            return [response, options, rawResponse];
        });
    }
    getIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: request.resource ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getIamPolicy request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getIamPolicy response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getIamPolicy(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getIamPolicy response %j', response);
            return [response, options, rawResponse];
        });
    }
    setIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: request.resource ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setIamPolicy request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('setIamPolicy response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .setIamPolicy(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('setIamPolicy response %j', response);
            return [response, options, rawResponse];
        });
    }
    testIamPermissions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: request.resource ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('testIamPermissions request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('testIamPermissions response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .testIamPermissions(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('testIamPermissions response %j', response);
            return [response, options, rawResponse];
        });
    }
    moveBillingAccount(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
                destination_parent: request.destinationParent ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('moveBillingAccount request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('moveBillingAccount response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .moveBillingAccount(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('moveBillingAccount response %j', response);
            return [response, options, rawResponse];
        });
    }
    listBillingAccounts(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: request.parent ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        const wrappedCallback = callback
            ? (error, values, nextPageRequest, rawResponse) => {
                this._log.info('listBillingAccounts values %j', values);
                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.
            }
            : undefined;
        this._log.info('listBillingAccounts request %j', request);
        return this.innerApiCalls
            .listBillingAccounts(request, options, wrappedCallback)
            ?.then(([response, input, output]) => {
            this._log.info('listBillingAccounts values %j', response);
            return [response, input, output];
        });
    }
    /**
     * Equivalent to `listBillingAccounts`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} request.pageSize
     *   Requested page size. The maximum page size is 100; this is also the
     *   default.
     * @param {string} request.pageToken
     *   A token identifying a page of results to return. This should be a
     *   `next_page_token` value returned from a previous `ListBillingAccounts`
     *   call. If unspecified, the first page of results is returned.
     * @param {string} request.filter
     *   Options for how to filter the returned billing accounts.
     *   This only supports filtering for
     *   [subaccounts](https://cloud.google.com/billing/docs/concepts) under a
     *   single provided parent billing account.
     *   (for example,
     *   `master_billing_account=billingAccounts/012345-678901-ABCDEF`).
     *   Boolean algebra and other fields are not currently supported.
     * @param {string} [request.parent]
     *   Optional. The parent resource to list billing accounts from.
     *   Format:
     *     - `organizations/{organization_id}`, for example,
     *       `organizations/12345678`
     *     - `billingAccounts/{billing_account_id}`, for example,
     *       `billingAccounts/012345-567890-ABCDEF`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.billing.v1.BillingAccount|BillingAccount} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBillingAccountsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBillingAccountsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: request.parent ?? '',
            });
        const defaultCallSettings = this._defaults['listBillingAccounts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('listBillingAccounts stream %j', request);
        return this.descriptors.page.listBillingAccounts.createStream(this.innerApiCalls.listBillingAccounts, request, callSettings);
    }
    /**
     * Equivalent to `listBillingAccounts`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {number} request.pageSize
     *   Requested page size. The maximum page size is 100; this is also the
     *   default.
     * @param {string} request.pageToken
     *   A token identifying a page of results to return. This should be a
     *   `next_page_token` value returned from a previous `ListBillingAccounts`
     *   call. If unspecified, the first page of results is returned.
     * @param {string} request.filter
     *   Options for how to filter the returned billing accounts.
     *   This only supports filtering for
     *   [subaccounts](https://cloud.google.com/billing/docs/concepts) under a
     *   single provided parent billing account.
     *   (for example,
     *   `master_billing_account=billingAccounts/012345-678901-ABCDEF`).
     *   Boolean algebra and other fields are not currently supported.
     * @param {string} [request.parent]
     *   Optional. The parent resource to list billing accounts from.
     *   Format:
     *     - `organizations/{organization_id}`, for example,
     *       `organizations/12345678`
     *     - `billingAccounts/{billing_account_id}`, for example,
     *       `billingAccounts/012345-567890-ABCDEF`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.billing.v1.BillingAccount|BillingAccount}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_billing.list_billing_accounts.js</caption>
     * region_tag:cloudbilling_v1_generated_CloudBilling_ListBillingAccounts_async
     */
    listBillingAccountsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: request.parent ?? '',
            });
        const defaultCallSettings = this._defaults['listBillingAccounts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('listBillingAccounts iterate %j', request);
        return this.descriptors.page.listBillingAccounts.asyncIterate(this.innerApiCalls['listBillingAccounts'], request, callSettings);
    }
    listProjectBillingInfo(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        const wrappedCallback = callback
            ? (error, values, nextPageRequest, rawResponse) => {
                this._log.info('listProjectBillingInfo values %j', values);
                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.
            }
            : undefined;
        this._log.info('listProjectBillingInfo request %j', request);
        return this.innerApiCalls
            .listProjectBillingInfo(request, options, wrappedCallback)
            ?.then(([response, input, output]) => {
            this._log.info('listProjectBillingInfo values %j', response);
            return [response, input, output];
        });
    }
    /**
     * Equivalent to `listProjectBillingInfo`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the billing account associated with the
     *   projects that you want to list. For example,
     *   `billingAccounts/012345-567890-ABCDEF`.
     * @param {number} request.pageSize
     *   Requested page size. The maximum page size is 100; this is also the
     *   default.
     * @param {string} request.pageToken
     *   A token identifying a page of results to be returned. This should be a
     *   `next_page_token` value returned from a previous `ListProjectBillingInfo`
     *   call. If unspecified, the first page of results is returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.billing.v1.ProjectBillingInfo|ProjectBillingInfo} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listProjectBillingInfoAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listProjectBillingInfoStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        const defaultCallSettings = this._defaults['listProjectBillingInfo'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('listProjectBillingInfo stream %j', request);
        return this.descriptors.page.listProjectBillingInfo.createStream(this.innerApiCalls.listProjectBillingInfo, request, callSettings);
    }
    /**
     * Equivalent to `listProjectBillingInfo`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the billing account associated with the
     *   projects that you want to list. For example,
     *   `billingAccounts/012345-567890-ABCDEF`.
     * @param {number} request.pageSize
     *   Requested page size. The maximum page size is 100; this is also the
     *   default.
     * @param {string} request.pageToken
     *   A token identifying a page of results to be returned. This should be a
     *   `next_page_token` value returned from a previous `ListProjectBillingInfo`
     *   call. If unspecified, the first page of results is returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.billing.v1.ProjectBillingInfo|ProjectBillingInfo}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_billing.list_project_billing_info.js</caption>
     * region_tag:cloudbilling_v1_generated_CloudBilling_ListProjectBillingInfo_async
     */
    listProjectBillingInfoAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        const defaultCallSettings = this._defaults['listProjectBillingInfo'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('listProjectBillingInfo iterate %j', request);
        return this.descriptors.page.listProjectBillingInfo.asyncIterate(this.innerApiCalls['listProjectBillingInfo'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified billingAccount resource name string.
     *
     * @param {string} billing_account
     * @returns {string} Resource name string.
     */
    billingAccountPath(billingAccount) {
        return this.pathTemplates.billingAccountPathTemplate.render({
            billing_account: billingAccount,
        });
    }
    /**
     * Parse the billing_account from BillingAccount resource.
     *
     * @param {string} billingAccountName
     *   A fully-qualified path representing billing_account resource.
     * @returns {string} A string representing the billing_account.
     */
    matchBillingAccountFromBillingAccountName(billingAccountName) {
        return this.pathTemplates.billingAccountPathTemplate.match(billingAccountName).billing_account;
    }
    /**
     * Return a fully-qualified organization resource name string.
     *
     * @param {string} organization
     * @returns {string} Resource name string.
     */
    organizationPath(organization) {
        return this.pathTemplates.organizationPathTemplate.render({
            organization: organization,
        });
    }
    /**
     * Parse the organization from Organization resource.
     *
     * @param {string} organizationName
     *   A fully-qualified path representing Organization resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationName(organizationName) {
        return this.pathTemplates.organizationPathTemplate.match(organizationName)
            .organization;
    }
    /**
     * Return a fully-qualified organizationBillingAccount resource name string.
     *
     * @param {string} organization
     * @param {string} billing_account
     * @returns {string} Resource name string.
     */
    organizationBillingAccountPath(organization, billingAccount) {
        return this.pathTemplates.organizationBillingAccountPathTemplate.render({
            organization: organization,
            billing_account: billingAccount,
        });
    }
    /**
     * Parse the organization from OrganizationBillingAccount resource.
     *
     * @param {string} organizationBillingAccountName
     *   A fully-qualified path representing organization_billing_account resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationBillingAccountName(organizationBillingAccountName) {
        return this.pathTemplates.organizationBillingAccountPathTemplate.match(organizationBillingAccountName).organization;
    }
    /**
     * Parse the billing_account from OrganizationBillingAccount resource.
     *
     * @param {string} organizationBillingAccountName
     *   A fully-qualified path representing organization_billing_account resource.
     * @returns {string} A string representing the billing_account.
     */
    matchBillingAccountFromOrganizationBillingAccountName(organizationBillingAccountName) {
        return this.pathTemplates.organizationBillingAccountPathTemplate.match(organizationBillingAccountName).billing_account;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified projectBillingInfo resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectBillingInfoPath(project) {
        return this.pathTemplates.projectBillingInfoPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from ProjectBillingInfo resource.
     *
     * @param {string} projectBillingInfoName
     *   A fully-qualified path representing ProjectBillingInfo resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectBillingInfoName(projectBillingInfoName) {
        return this.pathTemplates.projectBillingInfoPathTemplate.match(projectBillingInfoName).project;
    }
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(service) {
        return this.pathTemplates.servicePathTemplate.render({
            service: service,
        });
    }
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName) {
        return this.pathTemplates.servicePathTemplate.match(serviceName).service;
    }
    /**
     * Return a fully-qualified sku resource name string.
     *
     * @param {string} service
     * @param {string} sku
     * @returns {string} Resource name string.
     */
    skuPath(service, sku) {
        return this.pathTemplates.skuPathTemplate.render({
            service: service,
            sku: sku,
        });
    }
    /**
     * Parse the service from Sku resource.
     *
     * @param {string} skuName
     *   A fully-qualified path representing Sku resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromSkuName(skuName) {
        return this.pathTemplates.skuPathTemplate.match(skuName).service;
    }
    /**
     * Parse the sku from Sku resource.
     *
     * @param {string} skuName
     *   A fully-qualified path representing Sku resource.
     * @returns {string} A string representing the sku.
     */
    matchSkuFromSkuName(skuName) {
        return this.pathTemplates.skuPathTemplate.match(skuName).sku;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.cloudBillingStub && !this._terminated) {
            return this.cloudBillingStub.then(stub => {
                this._log.info('ending gRPC channel');
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.CloudBillingClient = CloudBillingClient;
//# sourceMappingURL=cloud_billing_client.js.map